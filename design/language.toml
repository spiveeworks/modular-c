[REQ-language]
partof = 'REQ-purpose'
text = '''
While it is not intended for multiple implementations to exist, it is still
useful to have an explicit language specification, independent of the
implementation, so that the implementation can be upgraded more liberally,
without breaking existing files.

The language is very straight forward:
- inherited C functionality, described in [[REQ-c_superset]]
- module basics, types, functions, imports [[REQ-language-items]]
- modularity, genericity, encapsulation [[REQ-language-modularity]]
- module subtleties, interfaces, versions [[REQ-language-versioning]]
'''

[REQ-c_superset]
partof = 'REQ-language'
text = '''
Since one of the goals of Modular C is to apply the simplicity of C, it makes
sense to adopt C as closely as possible.
One clear exception to this is the preprocessor, in particular `#include`
directives, since this is the feature the project attempts to address.

For these reasons the language shall be be a __C superset__ excluding the
preprocessor.

Unfortunately this means inheriting a lot of outdated features such as
under-specified integers, copy semantics, and mutability by default, but it
does make C interop basically free.

Further it makes transpiling into C a very natural implementation strategy, in
fact modular C essentially becomes a sophisticated preprocessor
'''

[REQ-language-items]
text = '''
Language shall have modules, inputs, types, functions, values

Modules are objects similar to C source files, except that they can be
manipulated from within the language.
Further they can take parameters, through "inputs"
Modules can be bound in 3 ways:
- In-line, using syntax identical to rust
- as a whole source file, accessed through the `input` semantic
- as an alias/specialization of a previously bound module

Inputs are Modular C's resident import keyword, starting with the letter 'i' as
required.

There are 4 kinds of input:
- In-line, by writing `pub input <item definition>`
- Alias, similarly by writing `pub input <identifier> = <binding>;`
- Source file, `[pub] input <identifier> = [<package path>.]<module name>;`
- Empty input, `pub input <identifier>;`

In cases that may be interpreted as either an alias or a source file, the alias
is tried first.
'''

[REQ-language-modularity]
text = '''
Language shall allow genericity and modularity through public inputs and public
outputs

Type definitions available downstream shall be declared using a more powerful
keyword such as 'open'.
'''

[REQ-language-versioning]
text = '''
Language shall conform strictly to semantic versioning, so that major, minor,
and patch changes to a module have the corresponding effects downstream, unless
fragility is opted into downstream.
'''
